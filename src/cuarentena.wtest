import cuarentena.*

describe "cuerantena" {

	/*
	 * Todos los objetos necesarios se asumen como instancias de una clase. 
	 * Si el diseño de tu solución utiliza objetos bien conocidos (definidos como object) en algunos casos 
	 * entonces se debe remover la declaración de la variable y la línea en que se sugiere la instanciación
	 * para usar directamente el objeto conocido
	 */
	// Objetos iniciales
	// Pandemia 
	// Trabajos	
	var programadore
	var docente
	var medique
	var panadere
	// Personas
	var milena
	var nicolas
	var mirta
	// Familia
	var perezGarcia

	method initialize() {
		pandemia.fase(4)
		programadore = new TrabajoNoEsencial(fasePermitida = 3, base = 80000, bono = 20000)
		docente = new TrabajoNoEsencial(base = 15000, bono = 2000, fasePermitida = 5)
		medique = new TrabajoSanitario(base = 60000, bono = 40000)
		panadere = new TrabajoEsencial(base = 30000, bono = 20000)
		milena = new Persona(edad = 25, tieneEnfermedadesPreexistentes = true, trabajos = [ programadore, docente ])
		nicolas = new Persona(edad = 19, tieneEnfermedadesPreexistentes = false, trabajos = [ panadere ])
		mirta = new Persona(edad = 67, tieneEnfermedadesPreexistentes = false, trabajos = [ medique ])
		perezGarcia = new Familia(integrantes = [ milena, mirta, nicolas ])
	}

	test "punto 1.1: ganancia de persona" {
		assert.equals(115000, milena.sueldo())
		assert.equals(35000, nicolas.sueldo())
		assert.equals(75000, mirta.sueldo())
	}

	test "punto 1.2: ganancia de familia" {
		assert.equals(225000, perezGarcia.sueldo())
	}

	test "punto 1.3: miembros en riesgos" {
		assert.notThat(perezGarcia.estaAislada())
		const familiaDeSoloMirta = new Familia(integrantes = [ mirta ])
		assert.that(familiaDeSoloMirta.estaAislada())
	}

	test "punto 1.4: trabajos principales" {
		const trabajosEsperados = [programadore, medique, panadere]
		assert.equals(trabajosEsperados, perezGarcia.trabajosPrincipales())
	}
 
  	test "punto 1.5: trabajadores inactivos" {
  		assert.equals([], perezGarcia.trabajadoresInactivos())
  		pandemia.fase(1)
  		assert.equals([milena], perezGarcia.trabajadoresInactivos())
  	}
 
/* 		
 * 	test "punto 2.1: puede realizar salida" {
 * 		 		
 * 		//TODO: verificar que mirta NO puede salir a comprar

 * 		//TODO: verificar que nicolas SI puede salir a comprar
 * 		//TODO: verificar que nicolas SI puede salir a ejercitarse
 * 		//TODO: verificar que nicolas SI puede salir a caminar
 * 		//TODO: verificar que nicolas SI puede salir a trabajar
 * 		

 * 		//TODO: pasar la pandemia a fase 3

 * 		//TODO: verificar que nicolas SI puede salir a comprar
 * 		//TODO: verificar que nicolas NO puede salir a ejercitarse
 * 		//TODO: verificar que nicolas NO puede salir a caminar
 * 		//TODO: verificar que nicolas SI puede salir a trabajar
 * 		
 * 	}
 */
/* 	
 * 	test "punto 2.2, 2.3 y 2.4.1: salir a pasear ok " {
 * 		//TODO hacer que nicolas salga a comprar
 * 		//TODO hacer que nicolas salga a trabajar
 * 		//TODO hacer que nicolas salga a comprar 
 * 		//TODO verificar que las salidas de nicolas son salirAComprar, salirATrabajar y salirAComprar
 * 	}
 */
/* 
 * 	test "punto 2.2, 2.3 y 2.4.2: salir a pasear no ok" {
 * 		//TODO hacer que milena salga a comprar (No se puede!)
 * 		//TODO verificar que milena no tenga salidas
 * 	}
 */
/* 
 * 	test "punto 3.1: Salida familiar ok" {

 * 		// TODO: hacer que perezGarcia salga a comprar 

 * 		//TODO: verificar que nicolas tenga la salida salirAComprar 
 * 		//TODO: verificar que mirta no tenga salidas
 * 		//TODO: verificar que milena no tenga salidas 
 * 	}
 */
/* 
 * 	test "punto 3.1: Salida familiar no ok" {
 * 		var familiaMirtaYMilena = //TODO: obtener/construir una Familia con mirta y milena como integrantes
 * 		
 * 		//TODO: hacer que la familiaMirtaYMilena salga a comprar (no se puede!)

 * 		//TODO: verificar que mirta no tenga salidas
 * 		//TODO: verificar que milena no tenga salidas
 * 	}
 */
}

