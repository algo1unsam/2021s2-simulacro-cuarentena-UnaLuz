import cuarentena.*
import trabajo.*

describe "cuerantena" {

	/*
	 * Todos los objetos necesarios se asumen como instancias de una clase. 
	 * Si el diseño de tu solución utiliza objetos bien conocidos (definidos como object) en algunos casos 
	 * entonces se debe remover la declaración de la variable y la línea en que se sugiere la instanciación
	 * para usar directamente el objeto conocido
	 */
	// Objetos iniciales
	// Pandemia 
	// Trabajos	
	var programadore
	var docente
	var medique
	var panadere
	// Personas
	var milena
	var nicolas
	var mirta
	// Familia
	var perezGarcia
	// Actividades
	const comprar = new Comprar()
	const trabajar = new Trabajar()
	const ejercitar = new Ejercitar()
	const pasear = new Pasear()

	method initialize() {
		pandemia.fase(4)
		programadore = new TrabajoNoEsencial(fasePermitida = 3, base = 80000, bono = 20000)
		docente = new TrabajoNoEsencial(base = 15000, bono = 2000, fasePermitida = 5)
		medique = new TrabajoSanitario(base = 60000, bono = 40000)
		panadere = new TrabajoEsencial(base = 30000, bono = 20000)
		milena = new Persona(edad = 25, tieneEnfermedadesPreexistentes = true, trabajos = [ programadore, docente ])
		nicolas = new Persona(edad = 19, tieneEnfermedadesPreexistentes = false, trabajos = [ panadere ])
		mirta = new Persona(edad = 67, tieneEnfermedadesPreexistentes = false, trabajos = [ medique ])
		perezGarcia = new Familia(integrantes = [ milena, mirta, nicolas ])
	}

	test "punto 1.1: ganancia de persona" {
		assert.equals(115000, milena.sueldo())
		assert.equals(35000, nicolas.sueldo())
		assert.equals(75000, mirta.sueldo())
	}

	test "punto 1.2: ganancia de familia" {
		assert.equals(225000, perezGarcia.sueldo())
	}

	test "punto 1.3: miembros en riesgos" {
		assert.notThat(perezGarcia.estaAislada())
		const familiaDeSoloMirta = new Familia(integrantes = [ mirta ])
		assert.that(familiaDeSoloMirta.estaAislada())
	}

	test "punto 1.4: trabajos principales" {
		const trabajosEsperados = [programadore, medique, panadere]
		assert.equals(trabajosEsperados, perezGarcia.trabajosPrincipales())
	}
 
  	test "punto 1.5: trabajadores inactivos" {
  		assert.equals([], perezGarcia.trabajadoresInactivos())
  		pandemia.fase(1)
  		assert.equals([milena], perezGarcia.trabajadoresInactivos())
  	}
 
		
	test "punto 2.1: puede realizar salida" {
		assert.notThat(comprar.puedeRealizarActividad(mirta))

		assert.that(comprar.puedeRealizarActividad(nicolas))
		assert.that(ejercitar.puedeRealizarActividad(nicolas))
		assert.that(pasear.puedeRealizarActividad(nicolas))
		assert.that(trabajar.puedeRealizarActividad(nicolas))
		
		pandemia.fase(3)

		assert.that(comprar.puedeRealizarActividad(nicolas))
		assert.notThat(ejercitar.puedeRealizarActividad(nicolas))
		assert.notThat(pasear.puedeRealizarActividad(nicolas))
		assert.that(trabajar.puedeRealizarActividad(nicolas))
	}

	
	test "punto 2.2, 2.3 y 2.4.1: salir a pasear ok " {
		nicolas.salirA(comprar)
		nicolas.salirA(trabajar)
		nicolas.salirA(comprar)
		assert.equals([comprar, trabajar, comprar], nicolas.actividades())
	}


	test "punto 2.2, 2.3 y 2.4.2: salir a pasear no ok" {
		milena.salirA(comprar)
		assert.equals([], milena.actividades())
	}


	test "punto 3.1: Salida familiar ok" {
		perezGarcia.salirA(comprar)
		assert.that(nicolas.actividades().contains(comprar))
		assert.equals([], mirta.actividades())
		assert.equals([], milena.actividades())
	}


	test "punto 3.1: Salida familiar no ok" {
		const familiaMirtaYMilena = new Familia(integrantes = [mirta, milena])
		familiaMirtaYMilena.salirA(comprar)
		assert.equals([], mirta.actividades())
		assert.equals([], milena.actividades())
	}

}

